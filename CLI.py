from core.BackgammonGame import BackgammonGame

class BackgammonCLI:
    """
    Clase que representa la interfaz de l√≠nea de comandos (CLI) del juego de Backgammon.
    
    Su funci√≥n es actuar como capa de presentaci√≥n, encargada de:
    - Mostrar el estado del juego y los tableros.
    - Recibir entradas del usuario desde la terminal.
    - Delegar toda la l√≥gica de juego al n√∫cleo (core), es decir, a la clase BackgammonGame.
    
    Esta clase cumple con los principios SOLID, especialmente el principio de 
    responsabilidad √∫nica, ya que solo gestiona la interacci√≥n con el usuario.
    """

    def __init__(self):
        """
        Constructor del CLI. Crea una nueva instancia del juego de Backgammon.
        
        Atributos:
            self.__game__ (BackgammonGame): instancia del n√∫cleo del juego que 
            contiene toda la l√≥gica interna del Backgammon.
        """
        self.__game__ = BackgammonGame()

    def mostrar_estado(self):
        """
        Muestra en la consola el estado actual del tablero del juego.
        
        Se invoca tras cada movimiento para que el jugador pueda visualizar 
        la distribuci√≥n actual de las fichas en el tablero.
        """
        board = self.__game__.get_board()
        print("\n=== Estado del Tablero ===")
        board.display()
        print("==========================\n")

    def mostrar_ayuda(self):
        """
        Muestra las instrucciones b√°sicas del juego y los comandos que el 
        usuario puede ingresar en la terminal.
        
        Es √∫til para jugadores nuevos o para recordar los movimientos v√°lidos.
        """
        print("\n=== Gu√≠a r√°pida de comandos ===")
        print("Durante tu turno, deber√°s ingresar:")
        print(" - Origen: punto desde el que mover√°s tu ficha (1-24, o 0 si est√° en la barra).")
        print(" - Destino: punto al que quer√©s moverla (1-24, o 25 si quer√©s sacarla del tablero).")
        print(" - Dado: valor del dado que vas a usar para ese movimiento.")
        print("\nEjemplo: si tiraste [3, 5], pod√©s mover desde el punto 12 al 9 (usando 3).")
        print("El sistema te avisar√° si un movimiento no es v√°lido.")
        print("\nüëâ Pod√©s escribir 'salir' en cualquier momento para terminar el juego.")
        print("===============================\n")

    def ejecutar_turno(self):
        """
        Controla la ejecuci√≥n completa de un turno del jugador actual.
        
        Incluye:
        - Tirar los dados.
        - Permitir al jugador mover fichas seg√∫n los valores obtenidos.
        - Validar que los movimientos sean correctos.
        - Pasar el turno al siguiente jugador cuando se usen todos los dados.
        """
        jugador = self.__game__.get_jugador_actual()
        print(f"\nTurno del Jugador {jugador.get_numero()} ({jugador.get_ficha()})")

        # Tirar dados
        valores = self.__game__.tirar_dados()
        print(f"Dados obtenidos: {valores}")

        # Mientras haya dados disponibles
        while self.__game__.get_dados_actuales():
            self.mostrar_estado()
            try:
                origen_input = input("Origen (1-24, 0=barra): ").strip()
                if origen_input.lower() == "salir":
                    print("üëã Juego interrumpido por el usuario.")
                    exit(0)
                origen = int(origen_input)

                destino_input = input("Destino (1-24, 0 o 25=meta): ").strip()
                if destino_input.lower() == "salir":
                    print("üëã Juego interrumpido por el usuario.")
                    exit(0)
                destino = int(destino_input)

                dado_input = input(f"Elige dado {self.__game__.get_dados_actuales()}: ").strip()
                if dado_input.lower() == "salir":
                    print("üëã Juego interrumpido por el usuario.")
                    exit(0)
                dado = int(dado_input)

                # Intentar realizar el movimiento
                if self.__game__.mover_ficha(origen, destino, dado):
                    print("Movimiento realizado correctamente.")
                else:
                    print(" Movimiento inv√°lido. Intenta nuevamente.")
            except ValueError:
                print("Entrada inv√°lida, ingresa solo n√∫meros.")
            except Exception as e:
                print(f"Error: {str(e)}")

        # Cambiar turno al finalizar los movimientos
        self.__game__.cambiar_turno()

    def iniciar(self):
        """
        Inicia el ciclo principal del juego de Backgammon en la terminal.
        
        Permite al usuario elegir entre:
        1. Comenzar una partida.
        2. Ver la ayuda de comandos.
        3. Salir del juego.
        
        Cuando se selecciona ‚ÄúJugar‚Äù, se ejecuta el bucle principal del juego
        hasta que uno de los jugadores cumple la condici√≥n de victoria.
        """
        print("=== Bienvenido al Backgammon CLI ===")
        print("Este es un juego por turnos. Se alternan los jugadores hasta que uno gane.\n")

        while True:
            print("1: Jugar una partida")
            print("2: Ver ayuda")
            print("3: Salir")
            opcion = input("\nSelecciona una opci√≥n (1-3): ").strip()

            if opcion == "1":
                self.mostrar_estado()
                while not self.__game__.juego_terminado():
                    self.ejecutar_turno()
                print("Tenemos un ganador.")
                break
            elif opcion == "2":
                self.mostrar_ayuda()
            elif opcion == "3":
                print("üëã Gracias por jugar al Backgammon.")
                break
            else:
                print("Opci√≥n inv√°lida. Elige 1, 2 o 3.\n")

if __name__ == "__main__":
    cli = BackgammonCLI()
    cli.iniciar()
